This really should have, at least as as an option, the ability to use 
Twisted as a backend.

add one or more example projects


possibly add automatic model creation to Django integration, e.g.

    AbstractFeed, AbstractItem, AbstractEnclosure = feedplatform.django.generate_models()

    class Feed(AbstractFeed):
        pass

or, automatically via a setting:

    settings.FEEDPLATFORM_AUTOGENERATE_MODELS = TRUE
    from feedplatform.integration.django import models
    models.Feed

explain and provide better tools to use custom model classes

automatic schema creation (generate create table statements)

let user configure if a feed failure should be logged as a warning
or just an info (or an error?)

allow addins to return multiple guids; helpful to migrate to another
guid scheme; would even allow more flexible guid schemes, e.g. based
on alternatively 'updated' or 'created' timestamps. by storing
information about which one was used within the guid, if a feed used
only 'created', but at some point adds 'updated' fields as well,
items in the database that were added with 'created' would still be
found and identified - and could be migrated to 'updated'.

related to the above, we could provide a special "solid" mode (via
a configuration option) that would always collect all possible guids
from all addins, and use an existing item if any of them matches.
then, even feeds that add guids at a later point will not have
duplicates, although of course there is increased danger of false
positives, as well as a performance cost.

support dry-run functionality (see what would happen if a feed were
to be updated, but do not write to database).

Management command to dump out a default config file.

Addin to use python-dateutil for more robust date support.

Addin to download favicons.

Addin to prioritize parsing, so that feeds that update frequently are
also checked more frequently (provide_prioritized_daemon).

Addin to respect the ttl given by the feed publisher.

data collectors should support a default set of data, so that
``collect_item_data()`` is valid.

explain in readme how certain hooks (like before_parse) can be used
to complete episode-worker jobs (e.g. guess the language of all
addins that have not been guessed yet). this is useful if an addin is
only added at a later point in the lifecycle of a project, for example.
builtin addins should support being used for this, where applicable.

abstract the Storm backend away. not only would this allow alternative
backends, like say, couchdb, it would also simplify cases where you'd
want to use FeedPlatform to sync for example a single feed, by letting
you use a "static backend", where the feed urls could be given directly
in Python.

ENFORCE_URI_SCHEME currently is not implemented. It should also not
only work for feeds, but also for example when downloading images, so
it is best implemented in ``util.urlopen()``.

Provide facilities that would add trailing dots to strings such as
title, desription etc. when they exceed a defined max length and would
be cut off (MySQL for example throughs warnings). This isn't as easy
as it may sound, since we'd also need to give the user a  way to define
those max length values for fields. While this is easy for custom
extensions' own fields, the user would need to be able to  overwrite
fields defined in code he doesn't control as well.

Right now, when using the thumbnail addin, it is hard to add new sizes
after the addin was already in use. Even reparsing all scripts will
often be not good enough, what with 304 reponses and image update
restrictions. Even if both of those are solved via run options, requiring
a full reparse is still a major inconvience. A better solution would be
to provide a ThumbnailManager addin which, when enabled, would add a
management command to regenerate the thumbnails. To be able to do this,
the manager would need access to both the store_thumbnail addin as well
as the store_image addin, which would save the original image. This could
be done by wrapping around:

    ADDINS = [
        ...
        thumbnail_manager(
            original=store_feed_images(..),
            thumbs=feed_image_thumbnails(...)
        )
        ...
    ]

This manager would then expose both addins (there could be a generic
implementation/base class for wrapper addins of this kind), while at the
same time having knowledge of how to store the thumbnails and where to
find the original image.

Support urllib2-like default addins. For example, right now at least one
daemon needs to be manually installed to have a "start" command available.
It would potentially be more user friendly to make "provide_loop_daemon"
available by default, if no other daemon is installed. If the user no
manually installs "xyz_daemon", the default daemon will not be available
unless explicitely set up as well, i.e. the default addin would only exist
as long as no other addin of the same type (base class) is added.

A global data collector would be a nice addition. Right now, the most
top-level is "collect_feed_data", what we could add another one that
works on FeedParser's top-level dict, i.e. the one that includes "version",
"status", "namespaces" etc.
