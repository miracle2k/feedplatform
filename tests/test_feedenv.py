"""Self-test the feed evolution framework.
"""

import sys
from StringIO import StringIO
from tests import feedev
from feedplatform import log

tests_run = 0

class Feed1(feedev.Feed):
    content = ""
    def pass1(feed):
        global tests_run
        tests_run += 1

    def pass5(feed):
        global tests_run
        tests_run += 1

class Feed2(feedev.Feed):
    content = ""
    def pass1(feed):
        global tests_run
        tests_run += 1

    def pass199(feed):
        global tests_run
        tests_run += 1

class InvalidTemplate(feedev.Feed):
    content = ""  # will be set to something invalid by the test

    def pass1(feed):
        pass


def test_all_handlers_are_called():
    try:
        feedev.testmod()
    finally:
        assert tests_run == 4


def test_log_output_is_captured():
    # make sure the dev sees the log generated by the library if a test fails
    old_stdout = sys.stdout
    sys.stdout = StringIO()
    try:
        log.reset()

        feedev.testmod()
        sys.stdout.seek(0)
        stdout = sys.stdout.read()
    finally:
        sys.stdout = old_stdout
        log.reset()

    print "stdout was: ", stdout    # already goes to nose again
    assert 'Updating feed #1' in stdout


def test_rendering_errors_are_logged():
    # If there is a problem with a feed that is only determined on
    # access, for example if the template has errors, we can not easily
    # tell the developer that is test is (potentially) incorrect, since
    # errors at this stage go through the feedparser download code, which
    # obviously captures those.
    # Our solution is to print a clear message to the output instead.

    old_stderr = sys.stderr
    sys.stderr = StringIO()
    try:
        # set to something invalid only now (and reset afterwards), so
        # that the output from this problem won't appear when the other
        # tests of this file run.
        InvalidTemplate.content = '{% end %}{% end %}{% end %}'
        try:
            feedev.testmod()
        finally:
            InvalidTemplate.content = ''
        sys.stderr.seek(0)
        stderr = sys.stderr.read()
    finally:
        sys.stderr = old_stderr

    print "stderr was: ", stderr    # already goes to nose again
    assert 'Failed to render' in stderr


# must be the last test! (removes all passes)
def test_fails_if_no_passes():
    global Feed1, Feed2, InvalidTemplate
    del Feed1
    del Feed2
    del InvalidTemplate

    try:
        feedev.testmod()
    except Exception, e:
        assert "has no passes" in str(e)
    else:
        raise AssertionError("testmod() did not fail on pass-less module")